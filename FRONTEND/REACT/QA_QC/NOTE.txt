INTRODUCTION
react-testing-lib
Philosophy
	- collection of best testing react practices
	- focus testing the way user using  (specification)
	- not internal implementation (code runiing test - unit tÃ©t)
Difference things
	- Find element by "accessibility marker" instead of testID

Provide DOM for tests

Jest - test runner
	=> find test (in dir)
	=> run test (by script)
	=> determine result => in log


CREAT-REACT-APP, include
	- configuration
	- webpack, babel
	- webserver (run js code)
	- testing Lib

Jest and Jest-DOM Assertions
=> decide the test failed or not
- start with expext + argument (subject)
- matcher
	- DOM matcher: toBeInTheDocument(), toBeVisible()
	- normal matcher: toBe('hello')

- jest-dom: 
	- comes with create=react=app


JEST
React Testinng Lib, provide
	- render virual dom
	- searching element in virtual dom
	- interact with VD (clicking..)
Need Test-runner to run
	- Make assertion, run test..
	- test runner - Jest
		- comwith react app
		- suggested
		- other like mocha, japmine

ABout watchmode
	- watch changes in file (from last commit) => commit no test :3
	- only run when changes

WHAT SHOULD FUNCTIONAL TESTS CATCH? AND REFACTOR
1. COPY THE IMAGE
2. SUMMARY
- TEST CODE PROCESSES
	- Things related to code processes
		- stats, data from the server, logical constraints
	- Not static cosmetics (static style or html tags on the screen)
		- should be checked by acceptance testing (selenium, cypress)
	- Depends on you to define the test
		- eg: if the number is from the server => put in funcional tests

	